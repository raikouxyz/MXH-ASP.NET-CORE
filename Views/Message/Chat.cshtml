@{
    ViewData["Title"] = $"Chat với {ViewBag.Receiver.FullName}";
    var receiver = ViewBag.Receiver;
    var messages = ViewBag.Messages;
    var currentUserId = ViewBag.CurrentUserId;
}

<div class="container-fluid py-4">
    <div class="row justify-content-center">
        <div class="col-lg-8 col-md-10">
            <div class="chat-container">
                <!-- Header với gradient và shadow -->
                <div class="chat-header">
                    <div class="d-flex align-items-center">
                        <div class="position-relative">
                            <img src="@receiver.ProfilePicture" alt="Avatar" class="chat-avatar">
                            <div class="online-indicator"></div>
                        </div>
                        <div class="ms-3">
                            <h5 class="mb-0 text-white fw-bold">@receiver.FullName</h5>
                            <small class="text-white-50">@receiver.Username</small>
                            <!-- Typing indicator với animation đẹp hơn -->
                            <div id="typingIndicator" class="typing-indicator-container" style="display: none;">
                                <div class="typing-dots">
                                    <span></span>
                                    <span></span>
                                    <span></span>
                                </div>
                                <small class="text-white-50 ms-2">đang nhập tin nhắn...</small>
                            </div>
                        </div>
                    </div>
                    <div class="chat-actions">
                        <button class="btn btn-outline-light btn-sm rounded-pill" onclick="window.history.back()">
                            <i class="fas fa-arrow-left"></i>
                        </button>
                    </div>
                </div>

                <!-- Messages với scroll tùy chỉnh -->
                <div class="chat-messages" id="messageContainer">
                    @foreach (var message in messages)
                    {
                        <div class="message-wrapper @(message.IsSender ? "message-sent" : "message-received")">
                            <div class="message-bubble">
                                <div class="message-content">
                                    @if (!string.IsNullOrEmpty(message.ImageUrl))
                                    {
                                        <div class="message-image-container">
                                            <img src="@message.ImageUrl" class="message-image" onclick="openImageModal(this.src)" alt="Hình ảnh tin nhắn">
                                        </div>
                                    }
                                    @if (!string.IsNullOrEmpty(message.Content))
                                    {
                                        <div class="message-text">@message.Content</div>
                                    }
                                </div>
                                <div class="message-time">
                                    @message.CreatedAt.ToString("HH:mm")
                                </div>
                            </div>
                        </div>
                    }
                </div>

                <!-- Input với thiết kế hiện đại -->
                <div class="chat-input-container">
                    <form id="messageForm" class="chat-form">
                        <input type="hidden" id="receiverId" value="@receiver.Id" />
                        <input type="hidden" id="currentUserId" value="@currentUserId" />
                        
                        <div class="input-wrapper">
                            <div class="input-group-modern">
                                <button type="button" class="input-btn" id="emojiButton" title="Emoji">
                                    <i class="far fa-smile"></i>
                                </button>
                                <input type="text" id="messageInput" class="form-control-modern" placeholder="Nhập tin nhắn..." />
                                <button type="button" class="input-btn" id="imageButton" title="Gửi hình ảnh">
                                    <i class="fas fa-image"></i>
                                </button>
                                <input type="file" id="imageInput" accept="image/*" style="display: none;" />
                            </div>
                            <button type="submit" class="send-btn" id="sendButton" title="Gửi tin nhắn">
                                <i class="fas fa-paper-plane"></i>
                            </button>
                        </div>
                        
                        <!-- Emoji picker wrapper -->
                        <div id="emojiPickerWrapper" class="emoji-picker-wrapper"></div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal preview hình ảnh với thiết kế đẹp hơn -->
<div class="modal fade" id="imagePreviewModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content border-0 shadow-lg">
            <div class="modal-header border-0 bg-gradient-primary text-white">
                <h5 class="modal-title"><i class="fas fa-image me-2"></i>Xem trước hình ảnh</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center p-4">
                <img id="previewImage" class="img-fluid rounded shadow" style="max-height: 400px;" />
            </div>
            <div class="modal-footer border-0">
                <button type="button" class="btn btn-secondary rounded-pill" data-bs-dismiss="modal">
                    <i class="fas fa-times me-1"></i>Hủy
                </button>
                <button type="button" class="btn btn-primary rounded-pill" id="sendImageBtn">
                    <i class="fas fa-paper-plane me-1"></i>Gửi
                </button>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/emoji-picker-element@1.12.1/index.css" />
    <style>
        /* Variables CSS cho theme */
        :root {
            --primary-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            --secondary-gradient: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
            --success-gradient: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
            --chat-bg: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            --message-sent: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            --message-received: #ffffff;
            --shadow-light: 0 2px 10px rgba(0,0,0,0.1);
            --shadow-medium: 0 4px 20px rgba(0,0,0,0.15);
            --border-radius: 20px;
        }

        body {
            background: var(--chat-bg);
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
        }

        /* Chat Container */
        .chat-container {
            background: white;
            border-radius: var(--border-radius);
            box-shadow: var(--shadow-medium);
            overflow: hidden;
            height: 80vh;
            display: flex;
            flex-direction: column;
        }

        /* Chat Header */
        .chat-header {
            background: var(--primary-gradient);
            padding: 1.5rem;
            display: flex;
            align-items: center;
            justify-content: space-between;
            box-shadow: var(--shadow-light);
            position: relative;
        }

        .chat-avatar {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            object-fit: cover;
            border: 3px solid rgba(255,255,255,0.3);
            box-shadow: var(--shadow-light);
        }

        .online-indicator {
            position: absolute;
            bottom: 2px;
            right: 2px;
            width: 12px;
            height: 12px;
            background: #4ade80;
            border: 2px solid white;
            border-radius: 50%;
            animation: pulse-online 2s infinite;
        }

        keyframes pulse-online {
            0% { box-shadow: 0 0 0 0 rgba(74, 222, 128, 0.7); }
            70% { box-shadow: 0 0 0 10px rgba(74, 222, 128, 0); }
            100% { box-shadow: 0 0 0 0 rgba(74, 222, 128, 0); }
        }

        /* Typing Indicator */
        .typing-indicator-container {
            display: flex;
            align-items: center;
            margin-top: 5px;
        }

        .typing-dots {
            display: flex;
            gap: 3px;
        }

        .typing-dots span {
            width: 6px;
            height: 6px;
            background: rgba(255,255,255,0.7);
            border-radius: 50%;
            animation: typing-dot 1.4s infinite;
        }

        .typing-dots span:nth-child(1) { animation-delay: 0s; }
        .typing-dots span:nth-child(2) { animation-delay: 0.2s; }
        .typing-dots span:nth-child(3) { animation-delay: 0.4s; }

        keyframes typing-dot {
            0%, 60%, 100% { transform: scale(1); opacity: 0.7; }
            30% { transform: scale(1.2); opacity: 1; }
        }

        /* Chat Messages */
        .chat-messages {
            flex: 1;
            overflow-y: auto;
            padding: 1.5rem;
            background: linear-gradient(to bottom, #fafbfc, #f8fafc);
            position: relative;
        }

        .chat-messages::-webkit-scrollbar {
            width: 6px;
        }

        .chat-messages::-webkit-scrollbar-track {
            background: rgba(0,0,0,0.05);
            border-radius: 10px;
        }

        .chat-messages::-webkit-scrollbar-thumb {
            background: linear-gradient(to bottom, #cbd5e0, #a0aec0);
            border-radius: 10px;
        }

        .message-wrapper {
            display: flex;
            margin-bottom: 1rem;
            animation: messageSlideIn 0.3s ease-out;
        }

        keyframes messageSlideIn {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .message-wrapper.message-sent {
            justify-content: flex-end;
        }

        .message-bubble {
            max-width: 75%;
            position: relative;
        }

        .message-content {
            padding: 1rem 1.25rem;
            border-radius: 18px;
            position: relative;
            word-wrap: break-word;
            box-shadow: var(--shadow-light);
            transition: all 0.3s ease;
        }

        .message-sent .message-content {
            background: var(--message-sent);
            color: white;
            border-bottom-right-radius: 6px;
        }

        .message-received .message-content {
            background: var(--message-received);
            color: #2d3748;
            border: 1px solid #e2e8f0;
            border-bottom-left-radius: 6px;
        }

        .message-content:hover {
            transform: translateY(-1px);
            box-shadow: var(--shadow-medium);
        }

        .message-text {
            line-height: 1.5;
            font-size: 0.95rem;
        }

        .message-time {
            font-size: 0.75rem;
            color: rgba(255,255,255,0.7);
            margin-top: 0.5rem;
            text-align: right;
        }

        .message-received .message-time {
            color: #a0aec0;
        }

        /* Message Images */
        .message-image-container {
            border-radius: 12px;
            overflow: hidden;
            margin-bottom: 0.5rem;
        }

        .message-image {
            width: 100%;
            max-width: 300px;
            height: auto;
            border-radius: 12px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .message-image:hover {
            transform: scale(1.02);
            box-shadow: var(--shadow-medium);
        }

        /* Chat Input */
        .chat-input-container {
            padding: 1.5rem;
            background: white;
            border-top: 1px solid #e2e8f0;
        }

        .chat-form {
            position: relative;
        }

        .input-wrapper {
            display: flex;
            gap: 1rem;
            align-items: end;
        }

        .input-group-modern {
            flex: 1;
            display: flex;
            align-items: center;
            background: #f7fafc;
            border: 2px solid #e2e8f0;
            border-radius: 25px;
            padding: 0.5rem;
            transition: all 0.3s ease;
        }

        .input-group-modern:focus-within {
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .form-control-modern {
            flex: 1;
            border: none;
            background: transparent;
            padding: 0.75rem 1rem;
            font-size: 0.95rem;
            outline: none;
        }

        .form-control-modern::placeholder {
            color: #a0aec0;
        }

        .input-btn {
            background: none;
            border: none;
            color: #667eea;
            padding: 0.5rem;
            border-radius: 50%;
            transition: all 0.3s ease;
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .input-btn:hover {
            background: rgba(102, 126, 234, 0.1);
            color: #5a67d8;
            transform: scale(1.1);
        }

        .send-btn {
            background: var(--primary-gradient);
            border: none;
            color: white;
            width: 50px;
            height: 50px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            box-shadow: var(--shadow-light);
            transition: all 0.3s ease;
        }

        .send-btn:hover:not(:disabled) {
            transform: translateY(-2px) scale(1.05);
            box-shadow: var(--shadow-medium);
        }

        .send-btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }

        /* Emoji Picker */
        .emoji-picker-wrapper {
            position: absolute;
            bottom: 100%;
            left: 0;
            z-index: 1000;
            margin-bottom: 1rem;
        }

        /* Modal Improvements */
        .bg-gradient-primary {
            background: var(--primary-gradient) !important;
        }

        /* Responsive */
        media (max-width: 768px) {
            .chat-container {
                height: 90vh;
                border-radius: 0;
            }
            
            .chat-header {
                padding: 1rem;
            }
            
            .chat-messages {
                padding: 1rem;
            }
            
            .message-bubble {
                max-width: 85%;
            }
        }

        /* Loading Animation */
        .loading-indicator {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: rgba(255,255,255,0.95);
            padding: 2rem;
            border-radius: var(--border-radius);
            box-shadow: var(--shadow-medium);
            z-index: 2000;
            text-align: center;
        }

        .loading-spinner {
            width: 40px;
            height: 40px;
            border: 3px solid #e2e8f0;
            border-top: 3px solid #667eea;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin: 0 auto 1rem;
        }

        keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* Image Modal */
        .image-modal {
            display: none;
            position: fixed;
            z-index: 1000;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.9);
            backdrop-filter: blur(5px);
        }

        .image-modal-content {
            margin: auto;
            display: block;
            max-width: 90%;
            max-height: 90%;
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            border-radius: 12px;
            box-shadow: var(--shadow-medium);
        }

        .image-modal-close {
            position: absolute;
            top: 20px;
            right: 30px;
            color: #ffffff;
            font-size: 35px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            background: rgba(0,0,0,0.5);
            width: 50px;
            height: 50px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .image-modal-close:hover {
            background: rgba(255,255,255,0.2);
            transform: scale(1.1);
        }
    </style>
}

@section Scripts {
    <!-- Thêm SignalR Client Library -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.0/signalr.min.js"></script>
    <script type="module" src="https://cdn.jsdelivr.net/npm/emoji-picker-element@1.12.1/index.js"></script>
    <script>
        $(document).ready(function() {
            // Khởi tạo các biến cần thiết
            const messageContainer = $('#messageContainer');
            const messageForm = $('#messageForm');
            const messageInput = $('#messageInput');
            const sendButton = $('#sendButton');
            const receiverId = $('#receiverId').val();
            const currentUserId = $('#currentUserId').val();
            let emojiPicker = null;
            let currentImageFile = null;
            let typingTimer = null;
            let isTyping = false;

            // Khởi tạo SignalR connection
            const connection = new signalR.HubConnectionBuilder()
                .withUrl("/chatHub")
                .withAutomaticReconnect()
                .build();

            // Bắt đầu kết nối SignalR
            startConnection();

            async function startConnection() {
                try {
                    await connection.start();
                    console.log("SignalR Connected");
                } catch (err) {
                    console.error("SignalR Connection Error: ", err);
                    alert("Không thể kết nối tới server. Vui lòng thử lại!");
                }
            }

            // Xử lý sự kiện reconnecting
            connection.onreconnecting(() => {
                console.log("Đang kết nối lại...");
            });

            // Xử lý sự kiện reconnected
            connection.onreconnected(() => {
                console.log("Đã kết nối lại thành công");
            });

            // Xử lý sự kiện close
            connection.onclose(() => {
                console.log("Mất kết nối");
                alert("Mất kết nối tới server!");
            });

            // Lắng nghe tin nhắn từ SignalR Hub
            connection.on("ReceiveMessage", function (messageData) {
                console.log("Received message:", messageData);
                appendMessage(messageData, false); // false = không phải tin nhắn của mình
            });

            // Lắng nghe confirmation khi gửi tin nhắn thành công
            connection.on("MessageSent", function (messageData) {
                console.log("Message sent successfully:", messageData);
                appendMessage(messageData, true); // true = tin nhắn của mình
                messageInput.val(''); // Xóa nội dung input
                sendButton.prop('disabled', false); // Enable nút gửi
            });

            // Lắng nghe typing indicator
            connection.on("UserTyping", function (data) {
                if (data.senderId == receiverId) {
                    showTypingIndicator();
                }
            });

            // Lắng nghe stop typing
            connection.on("UserStoppedTyping", function (data) {
                if (data.senderId == receiverId) {
                    hideTypingIndicator();
                }
            });

            // Lắng nghe tin nhắn đã được đọc
            connection.on("MessagesRead", function (data) {
                console.log("Messages marked as read by user:", data.readerId);
                // Có thể thêm hiệu ứng visual để hiển thị tin nhắn đã được đọc
            });

            // Lắng nghe lỗi từ SignalR Hub
            connection.on("Error", function (errorMessage) {
                console.error("SignalR Error:", errorMessage);
                alert(errorMessage);
                sendButton.prop('disabled', false);
            });

            // Cuộn xuống tin nhắn mới nhất
            messageContainer.scrollTop(messageContainer[0].scrollHeight);

            // Gửi tin nhắn text
            messageForm.submit(function(e) {
                e.preventDefault();
                const content = messageInput.val().trim();
                if (!content || connection.state !== signalR.HubConnectionState.Connected) return;

                // Disable nút gửi để tránh spam
                sendButton.prop('disabled', true);

                // Gửi tin nhắn qua SignalR
                connection.invoke("SendMessage", receiverId, content)
                    .catch(function (err) {
                        console.error("Error sending message:", err);
                        alert("Có lỗi xảy ra khi gửi tin nhắn");
                        sendButton.prop('disabled', false);
                    });
            });

            // Xử lý typing indicator
            messageInput.on('input', function() {
                if (connection.state !== signalR.HubConnectionState.Connected) return;

                // Gửi typing notification
                if (!isTyping) {
                    isTyping = true;
                    connection.invoke("SendTypingNotification", receiverId);
                }

                // Reset timer
                clearTimeout(typingTimer);
                typingTimer = setTimeout(function() {
                    if (isTyping) {
                        isTyping = false;
                        connection.invoke("SendStopTypingNotification", receiverId);
                    }
                }, 1000); // Stop typing sau 1 giây không gõ
            });

            // Stop typing khi focus out
            messageInput.on('blur', function() {
                if (isTyping) {
                    isTyping = false;
                    connection.invoke("SendStopTypingNotification", receiverId);
                }
            });

            // Hiển thị typing indicator
            function showTypingIndicator() {
                $('#typingIndicator').show();
            }

            // Ẩn typing indicator
            function hideTypingIndicator() {
                $('#typingIndicator').hide();
            }

            // Xử lý emoji picker (giữ nguyên code cũ)
            $('#emojiButton').click(function(e) {
                e.preventDefault();
                e.stopPropagation();

                if ($('#emojiPickerWrapper').children().length > 0) {
                    $('#emojiPickerWrapper').empty();
                    emojiPicker = null;
                    return;
                }

                $('#emojiPickerWrapper').empty();
                emojiPicker = document.createElement('emoji-picker');
                $('#emojiPickerWrapper').append(emojiPicker);

                $('#emojiPickerWrapper').css({
                    position: 'absolute',
                    bottom: '60px',
                    left: '0px',
                    zIndex: 2000
                });

                emojiPicker.addEventListener('emoji-click', event => {
                    const currentValue = messageInput.val();
                    const cursorPos = messageInput[0].selectionStart;
                    const newValue = currentValue.substring(0, cursorPos) +
                        event.detail.unicode +
                        currentValue.substring(cursorPos);
                    messageInput.val(newValue);
                    const newCursorPos = cursorPos + event.detail.unicode.length;
                    messageInput[0].setSelectionRange(newCursorPos, newCursorPos);
                    messageInput.focus();
                });
            });

            // Đóng picker khi click ra ngoài
            $(document).on('click', function(e) {
                if (!$(e.target).closest('#emojiPickerWrapper, #emojiButton').length) {
                    $('#emojiPickerWrapper').empty();
                    emojiPicker = null;
                }
            });

            // Xử lý chọn hình ảnh
            $('#imageButton').click(function() {
                $('#imageInput').click();
            });

            $('#imageInput').change(function(e) {
                const file = e.target.files[0];
                if (!file) return;

                if (file.size > 5 * 1024 * 1024) {
                    alert('Kích thước file không được vượt quá 5MB');
                    return;
                }

                const allowedTypes = ['image/jpeg', 'image/png', 'image/gif'];
                if (!allowedTypes.includes(file.type)) {
                    alert('Định dạng file không được hỗ trợ');
                    return;
                }

                const reader = new FileReader();
                reader.onload = function(e) {
                    $('#previewImage').attr('src', e.target.result);
                    currentImageFile = file;
                    $('#imagePreviewModal').modal('show');
                };
                reader.readAsDataURL(file);
            });

            // Gửi hình ảnh
            $('#sendImageBtn').click(function() {
                if (!currentImageFile || connection.state !== signalR.HubConnectionState.Connected) return;

                $('.loading-indicator').show();

                // Upload file trước
                const formData = new FormData();
                formData.append('receiverId', receiverId);
                formData.append('image', currentImageFile);
                formData.append('__RequestVerificationToken', $('input[name="__RequestVerificationToken"]').val());

                $.ajax({
                    url: '/Message/SendImage',
                    type: 'POST',
                    data: formData,
                    processData: false,
                    contentType: false,
                    success: function(response) {
                        if (response.success) {
                            // Sau khi upload thành công, gửi tin nhắn hình ảnh qua SignalR
                            connection.invoke("SendImage", receiverId, response.imageUrl)
                                .then(function() {
                                    $('#imagePreviewModal').modal('hide');
                                })
                                .catch(function (err) {
                                    console.error("Error sending image message:", err);
                                    alert("Có lỗi xảy ra khi gửi hình ảnh");
                                });
                        } else {
                            alert(response.message);
                        }
                    },
                    error: function() {
                        alert('Có lỗi xảy ra khi upload hình ảnh');
                    },
                    complete: function() {
                        $('.loading-indicator').hide();
                        currentImageFile = null;
                        $('#imageInput').val('');
                    }
                });
            });

            // Thêm tin nhắn vào container
            function appendMessage(messageData, isSender) {
                let contentHtml = '';
                if (messageData.imageUrl) {
                    contentHtml = `<div class="message-image-container"><img src="${messageData.imageUrl}" class="message-image" onclick="openImageModal(this.src)" alt="Hình ảnh tin nhắn"></div>`;
                }
                if (messageData.content) {
                    contentHtml += `<div class="message-text">${messageData.content}</div>`;
                }

                const messageHtml = `
                    <div class="message-wrapper ${isSender ? 'message-sent' : 'message-received'}">
                        <div class="message-bubble">
                            <div class="message-content">
                                ${contentHtml}
                            </div>
                            <div class="message-time">
                                ${messageData.createdAt}
                            </div>
                        </div>
                    </div>
                `;
                
                const $message = $(messageHtml).hide();
                messageContainer.append($message);
                $message.fadeIn(300);
                messageContainer.scrollTop(messageContainer[0].scrollHeight);

                // Đánh dấu tin nhắn là đã đọc nếu đang trong cuộc trò chuyện
                if (!isSender && connection.state === signalR.HubConnectionState.Connected) {
                    connection.invoke("MarkMessagesAsRead", receiverId);
                }
            }

            // Thêm modal xem ảnh và loading indicator
            $('body').append(`
                <div id="imageModal" class="image-modal">
                    <span class="image-modal-close">&times;</span>
                    <img class="image-modal-content" id="modalImage">
                </div>
                <div class="loading-indicator">
                    <div class="loading-spinner"></div>
                </div>
            `);

            $('.image-modal-close').click(function() {
                $('#imageModal').hide();
            });

            $(window).click(function(e) {
                if ($(e.target).is('#imageModal')) {
                    $('#imageModal').hide();
                }
            });
        });

        // Hàm mở modal xem ảnh
        function openImageModal(src) {
            const modal = document.getElementById('imageModal');
            const modalImg = document.getElementById('modalImage');
            modal.style.display = "block";
            modalImg.src = src;
        }
    </script>
} 

@Html.AntiForgeryToken() 